// <auto-generated />
using MAXIMAGO.KickIt.Players;
using MAXIMAGO.KickIt.SQLiteStorage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MAXIMAGO.KickIt.SQLiteStorage.Migrations
{
    [DbContext(typeof(KickItStorageContext))]
    [Migration("20180225170850_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("MAXIMAGO.KickIt.Games.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<long?>("GuestId");

                    b.Property<long?>("HomeId");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("HomeId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("MAXIMAGO.KickIt.Games.PlayerTeam", b =>
                {
                    b.Property<long>("PlayerId");

                    b.Property<long>("TeamId");

                    b.HasKey("PlayerId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("PlayerTeam");
                });

            modelBuilder.Entity("MAXIMAGO.KickIt.Games.Set", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("GameId");

                    b.Property<int>("GuestScore");

                    b.Property<int>("HomeScore");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Set");
                });

            modelBuilder.Entity("MAXIMAGO.KickIt.Games.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("MAXIMAGO.KickIt.Players.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("MAXIMAGO.KickIt.Games.Game", b =>
                {
                    b.HasOne("MAXIMAGO.KickIt.Games.Team", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId");

                    b.HasOne("MAXIMAGO.KickIt.Games.Team", "Home")
                        .WithMany()
                        .HasForeignKey("HomeId");
                });

            modelBuilder.Entity("MAXIMAGO.KickIt.Games.PlayerTeam", b =>
                {
                    b.HasOne("MAXIMAGO.KickIt.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MAXIMAGO.KickIt.Games.Team", "Team")
                        .WithMany("PlayerTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MAXIMAGO.KickIt.Games.Set", b =>
                {
                    b.HasOne("MAXIMAGO.KickIt.Games.Game")
                        .WithMany("Sets")
                        .HasForeignKey("GameId");
                });
#pragma warning restore 612, 618
        }
    }
}
